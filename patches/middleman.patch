diff -Naur nethack-3.4.3.b/src/Makefile nethack-3.4.3/src/Makefile
--- a/nh-setup/nethack-3.4.3/src/Makefile	2013-01-06 19:41:52.482424960 +0100
+++ b/nh-setup/nethack-3.4.3/src/Makefile	2013-01-06 19:43:10.342012210 +0100
@@ -141,6 +141,11 @@
 #LINK = gcc
 #LFLAGS = -Xlinker -soname=_APP_
 
+# PFA
+PFADIR =../../../pfa-src/ 
+pfa:
+	(cd $(PFADIR) ; $(MAKE) pfa)
+
 # Only used for the Gnome interface.
 # When including the Gnome interface, you need to include gnome specific
 # directories.  The ones given below is the usual spot for linux systems.
@@ -151,7 +156,7 @@
 # flags for debugging:
 # CFLAGS = -g -I../include
 
-CFLAGS = -O -I../include
+CFLAGS = -O -I../include -I$(PFADIR) 
 LFLAGS = 
 
 # The Qt and Be window systems are written in C++, while the rest of
@@ -215,7 +220,7 @@
 #
 #
 WINSRC = $(WINTTYSRC)
-WINOBJ = $(WINTTYOBJ)
+WINOBJ = $(WINTTYOBJ) bot_handler.o middle_man.o interface_mm.o db_manager.o math_tool.o prmath.o
 
 # on some systems the termcap library is in -ltermcap or -lcurses
 # on 386 Xenix, the -ltermlib tputs() seems not to work; use -lcurses instead
@@ -442,7 +447,7 @@
 	cp ../include/extern.DUMB ../include/extern.h
 	@touch DUMB.Setup
 
-all:	$(GAME)
+all: pfa $(GAME)
 
 
 #	dependencies for makedefs and its outputs, which the util
--- a/nh-setup/nethack-3.4.3/src/windows.c	2013-01-06 19:41:52.492424908 +0100
+++ b/nh-setup/nethack-3.4.3/src/windows.c	2013-01-06 19:43:24.228605240 +0100
@@ -3,6 +3,8 @@
 /* NetHack may be freely redistributed.  See license for details. */
 
 #include "hack.h"
+#include "middle_man.h"
+
 #ifdef TTY_GRAPHICS
 #include "wintty.h"
 #endif
@@ -102,6 +102,7 @@
 	if (!strcmpi(s, winchoices[i].procs->name)) {
 	    windowprocs = *winchoices[i].procs;
 	    if (winchoices[i].ini_routine) (*winchoices[i].ini_routine)();
+		install_middle_man(&windowprocs);
 	    return;
 	}

--- a/nh-setup/nethack-3.4.3/include/extern.h	2013-02-25 11:37:52.515525000 +0100
+++ a/nh-setup/nethack-3.4.3/include/extern.h	2013-02-25 11:37:23.293351000 +0100
@@ -199,6 +199,7 @@
 
 /* ### detect.c ### */
 
+E int mm_disc_sdoors;
 E struct obj *FDECL(o_in, (struct obj*,CHAR_P));
 E struct obj *FDECL(o_material, (struct obj*,unsigned));
 E int FDECL(gold_detect, (struct obj *));
@@ -988,6 +989,7 @@
 
 /* ### mklev.c ### */
 
+E int mm_nb_sdoor;
 #ifdef USE_TRAMPOLI
 E int FDECL(do_comp, (genericptr_t,genericptr_t));
 #endif
--- a/nh-setup/nethack-3.4.3/src/detect.c	2013-02-25 10:39:54.298626000 +0100
+++ a/nh-setup/nethack-3.4.3/src/detect.c   2013-02-25 11:31:39.125178000 +0100
@@ -1192,6 +1192,7 @@
 			/* A secret door is found from at the first search*/
 			if(0) continue;
 			cvt_sdoor_to_door(&levl[x][y]);	/* .typ = DOOR */
+			mm_disc_sdoors++;
 			exercise(A_WIS, TRUE);
 			nomul(0);
 			if (Blind && !aflag)
--- a/nh-setup/nethack-3.4.3/src/mklev.c	2013-02-25 11:08:30.208105000 +0100
+++ a/nh-setup/nethack-3.4.3/src/mklev.c	2013-02-25 11:11:18.310344000 +0100
@@ -378,6 +378,9 @@
 
 	if(!IS_WALL(levl[x][y].typ)) /* avoid SDOORs on already made doors */
 		type = DOOR;
+	if (type == SDOOR) {
+		mm_nb_sdoor++;
+	}
 	levl[x][y].typ = type;
 	if(type == DOOR) {
 	    if(!rn2(3)) {      /* is it a locked door, closed, or a doorway? */
